// Code generated by protoc-gen-go.
// source: mvccpb.proto
// DO NOT EDIT!

/*
Package mvccpb is a generated protocol buffer package.

It is generated from these files:
	mvccpb.proto

It has these top-level messages:
	MetaColumn
	MetaItem
	MetaLock
	Meta
*/
package mvccpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type MetaOpType int32

const (
	MetaOpType_Put    MetaOpType = 1
	MetaOpType_Delete MetaOpType = 2
	MetaOpType_Lock   MetaOpType = 3
)

var MetaOpType_name = map[int32]string{
	1: "Put",
	2: "Delete",
	3: "Lock",
}
var MetaOpType_value = map[string]int32{
	"Put":    1,
	"Delete": 2,
	"Lock":   3,
}

func (x MetaOpType) Enum() *MetaOpType {
	p := new(MetaOpType)
	*p = x
	return p
}
func (x MetaOpType) String() string {
	return proto.EnumName(MetaOpType_name, int32(x))
}
func (x *MetaOpType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetaOpType_value, data, "MetaOpType")
	if err != nil {
		return err
	}
	*x = MetaOpType(value)
	return nil
}
func (MetaOpType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MetaColumn struct {
	Name             []byte      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	OpType           *MetaOpType `protobuf:"varint,2,opt,name=opType,enum=mvccpb.MetaOpType" json:"opType,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *MetaColumn) Reset()                    { *m = MetaColumn{} }
func (m *MetaColumn) String() string            { return proto.CompactTextString(m) }
func (*MetaColumn) ProtoMessage()               {}
func (*MetaColumn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MetaColumn) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *MetaColumn) GetOpType() MetaOpType {
	if m != nil && m.OpType != nil {
		return *m.OpType
	}
	return MetaOpType_Put
}

type MetaItem struct {
	StartTs          *uint64       `protobuf:"varint,1,opt,name=start_ts" json:"start_ts,omitempty"`
	CommitTs         *uint64       `protobuf:"varint,2,opt,name=commit_ts" json:"commit_ts,omitempty"`
	Columns          []*MetaColumn `protobuf:"bytes,3,rep,name=columns" json:"columns,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *MetaItem) Reset()                    { *m = MetaItem{} }
func (m *MetaItem) String() string            { return proto.CompactTextString(m) }
func (*MetaItem) ProtoMessage()               {}
func (*MetaItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MetaItem) GetStartTs() uint64 {
	if m != nil && m.StartTs != nil {
		return *m.StartTs
	}
	return 0
}

func (m *MetaItem) GetCommitTs() uint64 {
	if m != nil && m.CommitTs != nil {
		return *m.CommitTs
	}
	return 0
}

func (m *MetaItem) GetColumns() []*MetaColumn {
	if m != nil {
		return m.Columns
	}
	return nil
}

type MetaLock struct {
	StartTs          *uint64       `protobuf:"varint,1,opt,name=start_ts" json:"start_ts,omitempty"`
	PrimaryKey       []byte        `protobuf:"bytes,2,opt,name=primary_key" json:"primary_key,omitempty"`
	Columns          []*MetaColumn `protobuf:"bytes,3,rep,name=columns" json:"columns,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *MetaLock) Reset()                    { *m = MetaLock{} }
func (m *MetaLock) String() string            { return proto.CompactTextString(m) }
func (*MetaLock) ProtoMessage()               {}
func (*MetaLock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MetaLock) GetStartTs() uint64 {
	if m != nil && m.StartTs != nil {
		return *m.StartTs
	}
	return 0
}

func (m *MetaLock) GetPrimaryKey() []byte {
	if m != nil {
		return m.PrimaryKey
	}
	return nil
}

func (m *MetaLock) GetColumns() []*MetaColumn {
	if m != nil {
		return m.Columns
	}
	return nil
}

// Meta will be splitted into a list if it gets too big.
// An auto increased index will be assigned to each Meta node. The field `next`
// stores next Meta's index and next is 0 if no more Meta exists.
// Meta0 always contains the Lock(if any) and the latest versions.
type Meta struct {
	Lock             *MetaLock   `protobuf:"bytes,1,opt,name=lock" json:"lock,omitempty"`
	Items            []*MetaItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	Next             *uint64     `protobuf:"varint,3,opt,name=next" json:"next,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Meta) Reset()                    { *m = Meta{} }
func (m *Meta) String() string            { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()               {}
func (*Meta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Meta) GetLock() *MetaLock {
	if m != nil {
		return m.Lock
	}
	return nil
}

func (m *Meta) GetItems() []*MetaItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Meta) GetNext() uint64 {
	if m != nil && m.Next != nil {
		return *m.Next
	}
	return 0
}

func init() {
	proto.RegisterType((*MetaColumn)(nil), "mvccpb.MetaColumn")
	proto.RegisterType((*MetaItem)(nil), "mvccpb.MetaItem")
	proto.RegisterType((*MetaLock)(nil), "mvccpb.MetaLock")
	proto.RegisterType((*Meta)(nil), "mvccpb.Meta")
	proto.RegisterEnum("mvccpb.MetaOpType", MetaOpType_name, MetaOpType_value)
}

var fileDescriptor0 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0xd5, 0xd8, 0xa4, 0xe1, 0x12, 0x21, 0x73, 0x2c, 0x99, 0xa0, 0x0a, 0x4b, 0x05, 0x52,
	0x87, 0xfe, 0x00, 0x16, 0x58, 0x90, 0x40, 0x30, 0x14, 0xd6, 0x2a, 0x58, 0x1e, 0xa2, 0xc6, 0xb5,
	0x95, 0x5c, 0x11, 0xf9, 0xf7, 0xd8, 0x67, 0x06, 0x40, 0x0c, 0x8c, 0xef, 0x7c, 0xfe, 0xde, 0xbb,
	0x07, 0x95, 0x7d, 0xd7, 0xda, 0xbf, 0xad, 0xfc, 0xe0, 0xc8, 0x61, 0x9e, 0x54, 0x73, 0x03, 0xf0,
	0x68, 0xa8, 0xbd, 0x75, 0xfd, 0xc1, 0xee, 0xb1, 0x02, 0xb9, 0x6f, 0xad, 0xa9, 0x67, 0x8b, 0xd9,
	0xb2, 0xc2, 0x06, 0x72, 0xe7, 0x37, 0x93, 0x37, 0x75, 0x16, 0xf4, 0xc9, 0x1a, 0x57, 0x5f, 0x88,
	0xf8, 0xe3, 0x89, 0x5f, 0x9a, 0x0d, 0x14, 0x51, 0xdd, 0x93, 0xb1, 0xa8, 0xa0, 0x18, 0xa9, 0x1d,
	0x68, 0x4b, 0x23, 0x13, 0x24, 0x9e, 0xc2, 0xb1, 0x76, 0xd6, 0x76, 0x3c, 0xca, 0x78, 0x74, 0x09,
	0x73, 0xcd, 0x66, 0x63, 0x2d, 0x16, 0x62, 0x59, 0xfe, 0xa4, 0xa6, 0x1c, 0xcd, 0x6b, 0xa2, 0x3e,
	0x38, 0xbd, 0xfb, 0x83, 0x7a, 0x06, 0xa5, 0x1f, 0x3a, 0xdb, 0x0e, 0xd3, 0x76, 0x67, 0x26, 0xe6,
	0x56, 0xff, 0xe3, 0xbe, 0x80, 0x8c, 0x0a, 0xcf, 0x41, 0xf6, 0x81, 0xcd, 0xbc, 0x72, 0xad, 0xbe,
	0x6f, 0xb2, 0xe7, 0x05, 0x1c, 0x75, 0xe1, 0xa2, 0x98, 0x59, 0xfc, 0x5e, 0xe0, 0x53, 0x63, 0x51,
	0xe6, 0x83, 0x82, 0x55, 0x08, 0x74, 0x75, 0x9d, 0x4a, 0x4c, 0x95, 0xe0, 0x1c, 0xc4, 0xf3, 0x81,
	0xd4, 0x0c, 0x01, 0xf2, 0x3b, 0xd3, 0x1b, 0x32, 0x2a, 0xc3, 0x02, 0x64, 0x24, 0x2b, 0xf1, 0x19,
	0x00, 0x00, 0xff, 0xff, 0xcc, 0x50, 0xae, 0x3c, 0x88, 0x01, 0x00, 0x00,
}
